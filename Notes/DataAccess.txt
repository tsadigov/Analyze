in ORM implementation
you should be able to create a table for instances of an interface

rows in that table will have 2 columns to define object behind interface {Id,Class}

ORM can be used to generate update statements for function calls
it should be able to analyze called functions and generate according dml methods

for examlpe

App.Storage<Workers>.GetAll().Where(w=>w.Position).ExecuteForAll(w=>w.increaseWage(200))
                             WHERE 
				workerPositionID=		worker.Wage=worker.Wage+200
				@PositionID


public class Worker{
	Position CurrentPosition;
	decimal Wage;
	public void IncreaseWage(decimal increase){
		Wage+=increase;
	}
}


/// ORM mapping-------------------------------------------------------------------------------------------------------------------------
class Base 
class DerivedA:Base
class DerviedB:Base

ORM ya tablePerHierarchy yaradir, bu zaman 1 table yaradilir, 
onun column lari= Base.COlumns+DerivedA.Columns+DerivedB.Columns mes: 4+6+5=15
Her rowda ya DerivedA-nin ya da DerivedB-nin ya da her ikisininki bosh olur
bunun yerine tipleri ortusen fieldleri eyni columna yazmaq olar ve DerivedA ve ya DerivedB olmasindan asili olaraq ferqli menaya geler 
bu zaman kolumnlarin sayi da daha az olar, NULL olma derecesi de azalar. mes: 4+6=10








Custom Linq provider
http://www.linqdev.com/PublicPortal/Default.aspx?tabid=256&forumid=8&tpage=1&view=topic&postid=64#64
http://blogs.msdn.com/b/mattwar/archive/2007/07/30/linq-building-an-iqueryable-provider-part-i.aspx



SqlLing
http://msdn.microsoft.com/en-us/library/bb386947(VS.90).aspx
http://msdn.microsoft.com/en-us/library/bb399342(v=vs.90).aspx
http://msdn.microsoft.com/en-us/library/bb386907(VS.90).aspx
http://msdn.microsoft.com/en-us/library/bb399400(VS.90).aspx


Z3
http://www.codeproject.com/useritems/SudokuSolver.asp
http://community.bartdesmet.net/blogs/bart/archive/2009/04/19/linq-to-z3-theorem-solving-on-steroids-part-0.aspx

